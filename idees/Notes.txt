











quick php to JS console:

 ?>
<script> // Use the PHP variable in JavaScript 
/* var phpVar = <?php echo json_encode($VARIABLE!!!!); ?>;
console.log(JSON.stringify(phpVar, null, 2)); */
</script>

<?php









Player 
    .Status1 = 0-Farm Scratched, 1-Farm Healthy , 2-Pro Scratched, 3- Pro Healthy

Defense1 = LEFT
Defense2 = RIGHT






and I am right to asume that actions on the /old website/html/php code that would read/write to its .db file will actually act on the same db file as the root website/html
Yes, you are absolutely right. When you create a symbolic link (/old/LHSQC-STHS.db) pointing to the original database file (/LHSQC-STHS.db), any read/write operations performed by the /old website's HTML/PHP code on its .db file will actually affect the original database file.

How It Works:
Read Operations: When the /old website's PHP code reads from LHSQC-STHS.db, it is actually reading from /LHSQC-STHS.db.

Write Operations: Similarly, when the /old website's PHP code writes to LHSQC-STHS.db, it is writing to /LHSQC-STHS.db.

This means both the root website and the /old website are accessing and modifying the same physical database file.

Benefits:
Consistency: Ensures that both websites are always working with the same data.

Simplification: Eliminates the need to manage multiple copies of the same database.

Potential Considerations:
Concurrency: If both websites are heavily used simultaneously, consider the concurrency management provided by SQLite to avoid conflicts.

Backups: Ensure you have backups of your database file, especially if both sites will be modifying it frequently.

Your setup is practical for shared database access and should work seamlessly as long as file paths and permissions are correctly configured



