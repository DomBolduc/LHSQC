<?php
// Script de diagnostic pour les statistiques de carri√®re
require_once "STHSSetting.php";

echo "<h2>üîç Diagnostic des Statistiques de Carri√®re</h2>";

// 1. V√©rifier les fichiers de base de donn√©es
echo "<h3>1. V√©rification des fichiers de base de donn√©es</h3>";
echo "<p><strong>Base principale :</strong> " . ($DatabaseFile ?: 'Non d√©finie') . "</p>";
echo "<p><strong>Base de carri√®re :</strong> " . ($CareerStatDatabaseFile ?: 'Non d√©finie') . "</p>";

if (file_exists($DatabaseFile)) {
    echo "<p>‚úÖ Base principale existe</p>";
} else {
    echo "<p>‚ùå Base principale n'existe pas</p>";
}

if (file_exists($CareerStatDatabaseFile)) {
    echo "<p>‚úÖ Base de carri√®re existe</p>";
} else {
    echo "<p>‚ùå Base de carri√®re n'existe pas</p>";
}

// 2. V√©rifier la structure de la base de carri√®re
if (file_exists($CareerStatDatabaseFile)) {
    echo "<h3>2. Structure de la base de carri√®re</h3>";
    try {
        $careerDB = new SQLite3($CareerStatDatabaseFile);
        
        // V√©rifier les tables
        $tables = $careerDB->query("SELECT name FROM sqlite_master WHERE type='table'");
        echo "<p><strong>Tables disponibles :</strong></p><ul>";
        while ($table = $tables->fetchArray()) {
            echo "<li>" . $table['name'] . "</li>";
        }
        echo "</ul>";
        
        // V√©rifier la table PlayerProStatCareer
        $careerTableCheck = $careerDB->querySingle("SELECT Count(name) AS CountName FROM sqlite_master WHERE type='table' AND name='PlayerProStatCareer'", true);
        echo "<p><strong>Table PlayerProStatCareer :</strong> " . ($careerTableCheck['CountName'] == 1 ? '‚úÖ Existe' : '‚ùå N\'existe pas') . "</p>";
        
        // V√©rifier la table PlayerProStatHistory
        $historyTableCheck = $careerDB->querySingle("SELECT Count(name) AS CountName FROM sqlite_master WHERE type='table' AND name='PlayerProStatHistory'", true);
        echo "<p><strong>Table PlayerProStatHistory :</strong> " . ($historyTableCheck['CountName'] == 1 ? '‚úÖ Existe' : '‚ùå N\'existe pas') . "</p>";
        
        // V√©rifier la table PlayerFarmStatHistory
        $farmHistoryTableCheck = $careerDB->querySingle("SELECT Count(name) AS CountName FROM sqlite_master WHERE type='table' AND name='PlayerFarmStatHistory'", true);
        echo "<p><strong>Table PlayerFarmStatHistory :</strong> " . ($farmHistoryTableCheck['CountName'] == 1 ? '‚úÖ Existe' : '‚ùå N\'existe pas') . "</p>";
        
    } catch (Exception $e) {
        echo "<p>‚ùå Erreur lors de l'ouverture de la base de carri√®re : " . $e->getMessage() . "</p>";
    }
}

// 3. Tester avec un joueur sp√©cifique
echo "<h3>3. Test avec un joueur</h3>";
if (file_exists($DatabaseFile)) {
    try {
        $db = new SQLite3($DatabaseFile);
        
        // R√©cup√©rer un joueur pour tester
        $testPlayer = $db->querySingle("SELECT Number, Name, UniqueID FROM PlayerInfo WHERE Number > 0 LIMIT 1", true);
        
        if ($testPlayer) {
            echo "<p><strong>Joueur de test :</strong> " . $testPlayer['Name'] . " (ID: " . $testPlayer['Number'] . ", UniqueID: " . $testPlayer['UniqueID'] . ")</p>";
            
            // Tester la base de carri√®re
            if (file_exists($CareerStatDatabaseFile)) {
                $careerDB = new SQLite3($CareerStatDatabaseFile);
                
                echo "<h4>Test de la base de carri√®re</h4>";
                
                // Test 1: Statistiques de carri√®re totales depuis PlayerProStatCareer
                $careerStat = $careerDB->querySingle("SELECT * FROM PlayerProStatCareer WHERE UniqueID = " . $testPlayer['UniqueID'], true);
                echo "<p><strong>Statistiques de carri√®re totales (PlayerProStatCareer) :</strong> " . (is_array($careerStat) ? "Trouv√©es" : "Aucune donn√©e") . "</p>";
                
                if (is_array($careerStat)) {
                    echo "<p>‚úÖ Donn√©es trouv√©es !</p>";
                    echo "<pre>" . print_r($careerStat, true) . "</pre>";
                } else {
                    echo "<p>‚ùå Aucune donn√©e trouv√©e</p>";
                }
                
                // Test 2: Statistiques de carri√®re totales (playoffs) depuis PlayerProStatHistory
                $playoffTotals = $careerDB->querySingle("SELECT SUM(GP) as GP, SUM(G) as G, SUM(A) as A, SUM(P) as P, SUM(PlusMinus) as PlusMinus, SUM(Pim) as Pim, 
                         SUM(PPG) as PPG, SUM(Shots) as Shots, SUM(ShotsBlock) as ShotsBlock, SUM(Hits) as Hits, SUM(GiveAway) as GiveAway, SUM(TakeAway) as TakeAway,
                         MIN(Year) as FirstYear, MAX(Year) as LastYear 
                         FROM PlayerProStatHistory WHERE UniqueID = " . $testPlayer['UniqueID'] . " AND Playoff = 'True'", true);
                echo "<p><strong>Statistiques de carri√®re totales (playoffs) :</strong> " . (is_array($playoffTotals) ? "Trouv√©es" : "Aucune donn√©e") . "</p>";
                
                if (is_array($playoffTotals)) {
                    echo "<p>‚úÖ Donn√©es trouv√©es !</p>";
                    echo "<pre>" . print_r($playoffTotals, true) . "</pre>";
                } else {
                    echo "<p>‚ùå Aucune donn√©e trouv√©e</p>";
                }
                
                // Test 3: Statistiques par saison (saison r√©guli√®re)
                $seasonStats = $careerDB->query("SELECT * FROM PlayerProStatHistory WHERE UniqueID = " . $testPlayer['UniqueID'] . " AND Playoff = 'False' ORDER BY Season DESC LIMIT 3");
                $seasonCount = 0;
                while ($season = $seasonStats->fetchArray()) {
                    $seasonCount++;
                }
                echo "<p><strong>Statistiques par saison (saison r√©guli√®re) :</strong> " . $seasonCount . " saisons trouv√©es</p>";
                
                // Test 4: Statistiques de playoffs par saison
                $playoffStats = $careerDB->query("SELECT * FROM PlayerProStatHistory WHERE UniqueID = " . $testPlayer['UniqueID'] . " AND Playoff = 'True' ORDER BY Season DESC LIMIT 3");
                $playoffCount = 0;
                while ($playoff = $playoffStats->fetchArray()) {
                    $playoffCount++;
                }
                echo "<p><strong>Statistiques de playoffs par saison :</strong> " . $playoffCount . " saisons trouv√©es</p>";
                
            } else {
                echo "<p>‚ùå Base de carri√®re non trouv√©e</p>";
            }
        } else {
            echo "<p>‚ùå Aucun joueur trouv√© dans la base</p>";
        }
        
    } catch (Exception $e) {
        echo "<p>‚ùå Erreur lors de l'ouverture de la base principale : " . $e->getMessage() . "</p>";
    }
}

// 4. V√©rifier la configuration
echo "<h3>4. Configuration</h3>";
echo "<p><strong>Langue :</strong> " . $lang . "</p>";
echo "<p><strong>ImagesCDNPath :</strong> " . $ImagesCDNPath . "</p>";

// 5. Test direct de la base de carri√®re
if (file_exists($CareerStatDatabaseFile)) {
    echo "<h3>5. Test direct de la base de carri√®re</h3>";
    try {
        $careerDB = new SQLite3($CareerStatDatabaseFile);
        
        // V√©rifier s'il y a des donn√©es dans PlayerProStatCareer
        $careerCount = $careerDB->querySingle("SELECT COUNT(*) FROM PlayerProStatCareer");
        echo "<p><strong>Nombre d'entr√©es dans PlayerProStatCareer :</strong> " . $careerCount . "</p>";
        
        if ($careerCount > 0) {
            // R√©cup√©rer un exemple
            $example = $careerDB->querySingle("SELECT * FROM PlayerProStatCareer LIMIT 1", true);
            echo "<p><strong>Exemple de donn√©es PlayerProStatCareer :</strong></p>";
            echo "<pre>" . print_r($example, true) . "</pre>";
            
            // V√©rifier les colonnes disponibles
            $columns = $careerDB->query("PRAGMA table_info(PlayerProStatCareer)");
            echo "<p><strong>Colonnes disponibles dans PlayerProStatCareer :</strong></p><ul>";
            while ($column = $columns->fetchArray()) {
                echo "<li>" . $column['name'] . " (" . $column['type'] . ")</li>";
            }
            echo "</ul>";
        }
        
        // V√©rifier s'il y a des donn√©es dans PlayerProStatHistory
        $historyCount = $careerDB->querySingle("SELECT COUNT(*) FROM PlayerProStatHistory");
        echo "<p><strong>Nombre d'entr√©es dans PlayerProStatHistory :</strong> " . $historyCount . "</p>";
        
        if ($historyCount > 0) {
            // R√©cup√©rer un exemple
            $example = $careerDB->querySingle("SELECT * FROM PlayerProStatHistory LIMIT 1", true);
            echo "<p><strong>Exemple de donn√©es PlayerProStatHistory :</strong></p>";
            echo "<pre>" . print_r($example, true) . "</pre>";
            
            // V√©rifier les colonnes disponibles
            $columns = $careerDB->query("PRAGMA table_info(PlayerProStatHistory)");
            echo "<p><strong>Colonnes disponibles dans PlayerProStatHistory :</strong></p><ul>";
            while ($column = $columns->fetchArray()) {
                echo "<li>" . $column['name'] . " (" . $column['type'] . ")</li>";
            }
            echo "</ul>";
        }
        
        // V√©rifier s'il y a des donn√©es dans PlayerFarmStatHistory
        $farmHistoryCount = $careerDB->querySingle("SELECT COUNT(*) FROM PlayerFarmStatHistory");
        echo "<p><strong>Nombre d'entr√©es dans PlayerFarmStatHistory :</strong> " . $farmHistoryCount . "</p>";
        
        if ($farmHistoryCount > 0) {
            // R√©cup√©rer un exemple
            $example = $careerDB->querySingle("SELECT * FROM PlayerFarmStatHistory LIMIT 1", true);
            echo "<p><strong>Exemple de donn√©es PlayerFarmStatHistory :</strong></p>";
            echo "<pre>" . print_r($example, true) . "</pre>";
        }
        
    } catch (Exception $e) {
        echo "<p>‚ùå Erreur lors du test direct : " . $e->getMessage() . "</p>";
    }
}

echo "<h3>6. Recommandations</h3>";
echo "<ul>";
echo "<li>V√©rifiez que la base LHSQC-STHSCareerStat.db contient des donn√©es dans PlayerProStatCareer</li>";
echo "<li>Assurez-vous que le fichier STHSSetting.ini est correctement configur√©</li>";
echo "<li>V√©rifiez que les tables PlayerProStatCareer, PlayerProStatHistory et PlayerFarmStatHistory existent</li>";
echo "<li>Testez avec un joueur qui a des statistiques de carri√®re</li>";
echo "<li>V√©rifiez que les colonnes GP, G, A, P, PlusMinus, Pim, PPG, Shots, ShotsBlock, Hits, GiveAway, TakeAway, Year sont pr√©sentes dans PlayerProStatCareer</li>";
echo "</ul>";

echo "<p><a href='PlayerReport.php?Player=1'>Tester avec le joueur #1</a></p>";
?> 